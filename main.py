import telebot
from telebot import types

bot = telebot.TeleBot('7022589359:AAHETz5bgUJ68hCZFE7qVpJSOl36kST-x1c')
# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
people = []


#####################################################################################
#           –û–ü–ò–°–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–•                  #
#####################################################################################
class Person:
    def __init__(self, chat_id, user_state='', name='', surname='', age=0):
        self.chat_id = chat_id
        self.user_state = user_state
        self.name = name
        self.surname = surname
        self.age = age

    def update(self, **kwargs):
        self.user_state = kwargs.get('user_state', self.user_state)
        self.name = kwargs.get('name', self.name)
        self.surname = kwargs.get('surname', self.surname)
        self.age = kwargs.get('age', self.age)

    def print_data(self):
        print(f"Chat ID: {self.chat_id} User State: {self.user_state} Name: {self.name} Surname: {self.surname} Age: {self.age}")


def get_person(chat_id):
    for person in people:
        if person.chat_id == chat_id:
            return person
    return None

def add_person(chat_id):
    person = Person(chat_id)
    people.append(person)
    return person

def update_person(chat_id, **kwargs):
    person = get_person(chat_id)
    if person:
        person.update(**kwargs)

def print_people():
    print('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
    for person in people:
        person.print_data()
    print('\n')

#####################################################################################
#                    –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î                                          #
#####################################################################################

@bot.message_handler(commands=['start', 'help', 'prof', 'about'])
def handle_commands(message):
    chat_id = message.chat.id

    if message.text == '/start':
        text_start = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, '

        if not get_person(chat_id):
            add_person(chat_id)
            text_start += '–∫–∞–∂–µ—Ç—Å—è –≤—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ!\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–∞–≤ –Ω–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"\n\n'
        else:
            text_start += f'{get_person(chat_id).name}!\n\n'
        update_person(chat_id, user_state='')

        text_start += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:"
        bot.send_message(chat_id, text_start, reply_markup=get_navigation_buttons())
        print_people()

    elif message.text == '/help':
        update_person(chat_id, user_state='')
        bot.send_message(chat_id, "–•–æ—Ç–µ–ª –±—ã —è –ø–æ–º–æ—á—å, –Ω–æ —É –º–µ–Ω—è –ª–∞–ø–∫–∏ (", reply_markup=get_navigation_buttons())

    elif message.text == '/prof':
        update_person(chat_id, user_state='waiting_for_name')
        person = get_person(chat_id)

        text_prof = f'–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: \n\n–ò–º—è: {person.name}\n–§–∞–º–∏–ª–∏—è: {person.surname}\n–í–æ–∑—Ä–∞—Å—Ç: {person.age}'
        bot.send_message(chat_id, text=text_prof)

        remove_keyboard = types.ReplyKeyboardRemove()  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        bot.send_message(chat_id, "–ú–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=remove_keyboard)

    elif message.text == '/about':
        update_person(chat_id, user_state='')
        bot.send_message(
            chat_id,
            "–°–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–≥–æ —á—É–¥–∞: @nipoks\\_kit üê≥\n"
            "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π —Ç–≥ –±–æ—Ç –Ω–∞ pythonüåö –ï–≥–æ –∏–∑—É—á–∞–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –ï–ì–≠ —Å –í–∏–∫–æ–π 3 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥\n\n"
            "–≠—Ç–æ–π –∑–∏–º–æ–π –±—ã–ª –≤–ø–µ—Ä–≤—ã–µ –Ω–∞–ø–∏—Å–∞–Ω –±–æ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –±–ª—é–¥ –Ω–∞ *_JavaSpring_* —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º *_PostgreSQL_*",
            parse_mode="MarkdownV2",
            reply_markup=get_navigation_buttons()
        )


#####################################################################################
#                 –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ö–ò –ü–û–õ–£–ß–ê–ï–ú–û–ì–û –¢–ï–ö–°–¢–ê                                 #
#####################################################################################

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id
    text = message.text

    if text in ['–ü–æ–º–æ—â—å', '–û –Ω–∞—Å', '–ù–∞ –≥–ª–∞–≤–Ω—É—é', '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']:
        command_map = {
            '–ü–æ–º–æ—â—å': '/help',
            '–û –Ω–∞—Å': '/about',
            '–ù–∞ –≥–ª–∞–≤–Ω—É—é': '/start',
            '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å': '/prof'
        }
        message.text = command_map[text]
        handle_commands(message)
        return

    person = get_person(chat_id)
    if person and person.user_state:
        if person.user_state == 'waiting_for_name':
            if len(text) > 20:
                bot.send_message(chat_id, '–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.')
            else:
                update_person(chat_id, user_state='waiting_for_surname', name=text)
                bot.send_message(chat_id, '–ö–∞–∫–∞—è —É –≤–∞—Å —Ñ–∞–º–∏–ª–∏—è?')

        elif person.user_state == 'waiting_for_surname':
            update_person(chat_id, user_state='waiting_for_age', surname=text)
            bot.send_message(chat_id, '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?')

        elif person.user_state == 'waiting_for_age':
            try:
                age = int(text)
                # –≤ —Å–ª—É—á–∞–µ –≤–µ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è 2 –∫–Ω–æ–ø–∫–∏: –¥–∞ –Ω–µ—Ç
                # –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                keyboard = types.InlineKeyboardMarkup()
                key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
                key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
                keyboard.add(key_yes, key_no)

                question = f'–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: \n\n–ò–º—è: {person.name}\n–§–∞–º–∏–ª–∏—è: {person.surname}\n–í–æ–∑—Ä–∞—Å—Ç: {age}'

                bot.send_message(chat_id, text=question, reply_markup=keyboard)
                update_person(chat_id, user_state='', age=age)

            except ValueError:
                bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
    else:
        bot.send_message(chat_id, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã( –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ: ')

#####################################################################################
#               –ë–õ–û–ö –û–ë–†–ê–ë–û–¢–ö–ò –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–ö–ò                             #
#####################################################################################
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    chat_id = call.message.chat.id

    if call.data == 'yes':
        bot.send_message(chat_id, '–ó–∞–ø–æ–º–Ω—é :)', reply_markup=get_navigation_buttons())
    elif call.data == 'no':
        update_person(chat_id, user_state='waiting_for_name')
        remove_keyboard = types.ReplyKeyboardRemove()  # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', reply_markup=remove_keyboard)

#####################################################################################
#                      –ë–õ–û–ö –ö–ù–û–ü–û–ö –ù–ê–í–ò–ì–ê–¶–ò–ò                                        #
#####################################################################################
def get_navigation_buttons():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_help = types.KeyboardButton('–ü–æ–º–æ—â—å')
    button_about = types.KeyboardButton('–û –Ω–∞—Å')
    button_start_reg = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
    button_start = types.KeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω—É—é')
    keyboard.add(button_help, button_about, button_start_reg, button_start)
    return keyboard



bot.polling(none_stop=True, interval=0)
